String and &Str

*The two commonly used types of strings 
    String - owned
    &str - borrowed String slice
*Must use an owned String to store in a struct
*Use &str when passing to a function

EXAMPLE

fn print_it(data: &str){
    println!("{:?}", data);
}

fn main(){
    print_it("a string slice"); //prints the text passed

    let owned_string = "owned string".to_owned(); //declaring a string as owned or 
    let another_owned = String::from("another");

    print_it(&owned_string);
    print_it(&another_owned);
}

*WILL NOT WORK*
struct Employee{
    name: &str,
    //when struct is droped, memory won't be cleaned cus 
    //borrowed data.
}

fn main() {
    let emp_name = "Jayson"; //this is borrowed string
    let emp = Employee{
        name: emp_name
    };
}


*FIXED*
struct Employee{
    name: String,
}

fn main() {
    let emp_name = "Jayson".to_owned();
    let emp_name = String::from("Jayson");
    let emp = Employee{
        name: emp_name
    };
}

RECAP
*Strings are automatically borrowed
*Use .to_owned() or String::from() to create an owned copy of a string slice
*Use an owned String when storing in a struct.